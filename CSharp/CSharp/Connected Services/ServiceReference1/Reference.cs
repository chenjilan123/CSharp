//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.MapServiceSoap")]
    public interface MapServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllMapNames", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> GetAllMapNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InitialStaticCache", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> InitialStaticCacheAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QueryAllLayerByPoint", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> QueryAllLayerByPointAsync(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QueryAllLayerByAttr", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> QueryAllLayerByAttrAsync(string pName, string cName, string queryVal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QueryAllLayerByLngLatAttr", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> QueryAllLayerByLngLatAttrAsync(double lng, double lat, string queryVal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateMapImgFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.CreateMapImgFileResponse> CreateMapImgFileAsync(ServiceReference1.CreateMapImgFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreatGoogleTile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.CreatGoogleTileResponse> CreatGoogleTileAsync(ServiceReference1.CreatGoogleTileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreatCatelliteTile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.CreatCatelliteTileResponse> CreatCatelliteTileAsync(ServiceReference1.CreatCatelliteTileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreatCwtTile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.CreatCwtTileResponse> CreatCwtTileAsync(ServiceReference1.CreatCwtTileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CacheGeoCodeAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task CacheGeoCodeAddressAsync(string strlonlat, string cacheAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDistrictInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> GetDistrictInfoAsync(string[] idlonlats);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCityDistrictInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> GetCityDistrictInfoAsync(string[] idlonlats);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFullDistrictInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> GetFullDistrictInfoAsync(string[] idlonlats);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDistrictInfoByXY", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetDistrictInfoByXYAsync(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetWeatherId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetWeatherIdAsync(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRoadNames", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> GetRoadNamesAsync(string[] idlonlats);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRoadName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetRoadNameAsync(double lon, double lat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAlarmState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetAlarmStateAsync(string strXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRoadRank", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetRoadRankAsync(double lon, double lat);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAlarmStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.GetAlarmStatusResponse> GetAlarmStatusAsync(ServiceReference1.GetAlarmStatusRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRegionNames", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> GetRegionNamesAsync(string regionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsInRegion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> IsInRegionAsync(double lon, double lat, string regionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsInRegions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> IsInRegionsAsync(string[] paramStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExportTrackLine", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ExportTrackLineResponse> ExportTrackLineAsync(ServiceReference1.ExportTrackLineRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OutInAreaStatistic", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> OutInAreaStatisticAsync(string[] trackData, string[] areaData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RouteAnaly", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> RouteAnalyAsync(double sX, double sY, double eX, double eY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/T_CacheInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> T_CacheInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/T_GetQueryCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> T_GetQueryCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/T_ExportQueryIP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> T_ExportQueryIPAsync();
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateMapImgFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreateMapImgFileRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int width;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int height;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int zoom;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public double lon;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public double lat;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string carnum;
        
        public CreateMapImgFileRequest()
        {
        }
        
        public CreateMapImgFileRequest(int width, int height, int zoom, double lon, double lat, string carnum)
        {
            this.width = width;
            this.height = height;
            this.zoom = zoom;
            this.lon = lon;
            this.lat = lat;
            this.carnum = carnum;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateMapImgFileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreateMapImgFileResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] CreateMapImgFileResult;
        
        public CreateMapImgFileResponse()
        {
        }
        
        public CreateMapImgFileResponse(byte[] CreateMapImgFileResult)
        {
            this.CreateMapImgFileResult = CreateMapImgFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreatGoogleTile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreatGoogleTileRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int width;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int height;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int zoom;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public double lon;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public double lat;
        
        public CreatGoogleTileRequest()
        {
        }
        
        public CreatGoogleTileRequest(int width, int height, int zoom, double lon, double lat)
        {
            this.width = width;
            this.height = height;
            this.zoom = zoom;
            this.lon = lon;
            this.lat = lat;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreatGoogleTileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreatGoogleTileResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] CreatGoogleTileResult;
        
        public CreatGoogleTileResponse()
        {
        }
        
        public CreatGoogleTileResponse(byte[] CreatGoogleTileResult)
        {
            this.CreatGoogleTileResult = CreatGoogleTileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreatCatelliteTile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreatCatelliteTileRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int width;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int height;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int zoom;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public double lon;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public double lat;
        
        public CreatCatelliteTileRequest()
        {
        }
        
        public CreatCatelliteTileRequest(int width, int height, int zoom, double lon, double lat)
        {
            this.width = width;
            this.height = height;
            this.zoom = zoom;
            this.lon = lon;
            this.lat = lat;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreatCatelliteTileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreatCatelliteTileResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] CreatCatelliteTileResult;
        
        public CreatCatelliteTileResponse()
        {
        }
        
        public CreatCatelliteTileResponse(byte[] CreatCatelliteTileResult)
        {
            this.CreatCatelliteTileResult = CreatCatelliteTileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreatCwtTile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreatCwtTileRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int width;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int height;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int zoom;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public double lon;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public double lat;
        
        public CreatCwtTileRequest()
        {
        }
        
        public CreatCwtTileRequest(int width, int height, int zoom, double lon, double lat)
        {
            this.width = width;
            this.height = height;
            this.zoom = zoom;
            this.lon = lon;
            this.lat = lat;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreatCwtTileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreatCwtTileResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] CreatCwtTileResult;
        
        public CreatCwtTileResponse()
        {
        }
        
        public CreatCwtTileResponse(byte[] CreatCwtTileResult)
        {
            this.CreatCwtTileResult = CreatCwtTileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlarmStatus", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAlarmStatusRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string strInXml;
        
        public GetAlarmStatusRequest()
        {
        }
        
        public GetAlarmStatusRequest(string strInXml)
        {
            this.strInXml = strInXml;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlarmStatusResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAlarmStatusResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int GetAlarmStatusResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string strOutXml;
        
        public GetAlarmStatusResponse()
        {
        }
        
        public GetAlarmStatusResponse(int GetAlarmStatusResult, string strOutXml)
        {
            this.GetAlarmStatusResult = GetAlarmStatusResult;
            this.strOutXml = strOutXml;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExportTrackLine", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ExportTrackLineRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string[] lonlats;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string shapeFileName;
        
        public ExportTrackLineRequest()
        {
        }
        
        public ExportTrackLineRequest(string[] lonlats, string shapeFileName)
        {
            this.lonlats = lonlats;
            this.shapeFileName = shapeFileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExportTrackLineResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ExportTrackLineResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ExportTrackLineResult;
        
        public ExportTrackLineResponse()
        {
        }
        
        public ExportTrackLineResponse(byte[] ExportTrackLineResult)
        {
            this.ExportTrackLineResult = ExportTrackLineResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public interface MapServiceSoapChannel : ServiceReference1.MapServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public partial class MapServiceSoapClient : System.ServiceModel.ClientBase<ServiceReference1.MapServiceSoap>, ServiceReference1.MapServiceSoap
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MapServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(MapServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), MapServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MapServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MapServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MapServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MapServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MapServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllMapNamesAsync()
        {
            return base.Channel.GetAllMapNamesAsync();
        }
        
        public System.Threading.Tasks.Task<bool> InitialStaticCacheAsync()
        {
            return base.Channel.InitialStaticCacheAsync();
        }
        
        public System.Threading.Tasks.Task<string> QueryAllLayerByPointAsync(double x, double y)
        {
            return base.Channel.QueryAllLayerByPointAsync(x, y);
        }
        
        public System.Threading.Tasks.Task<string> QueryAllLayerByAttrAsync(string pName, string cName, string queryVal)
        {
            return base.Channel.QueryAllLayerByAttrAsync(pName, cName, queryVal);
        }
        
        public System.Threading.Tasks.Task<string> QueryAllLayerByLngLatAttrAsync(double lng, double lat, string queryVal)
        {
            return base.Channel.QueryAllLayerByLngLatAttrAsync(lng, lat, queryVal);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.CreateMapImgFileResponse> ServiceReference1.MapServiceSoap.CreateMapImgFileAsync(ServiceReference1.CreateMapImgFileRequest request)
        {
            return base.Channel.CreateMapImgFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.CreateMapImgFileResponse> CreateMapImgFileAsync(int width, int height, int zoom, double lon, double lat, string carnum)
        {
            ServiceReference1.CreateMapImgFileRequest inValue = new ServiceReference1.CreateMapImgFileRequest();
            inValue.width = width;
            inValue.height = height;
            inValue.zoom = zoom;
            inValue.lon = lon;
            inValue.lat = lat;
            inValue.carnum = carnum;
            return ((ServiceReference1.MapServiceSoap)(this)).CreateMapImgFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.CreatGoogleTileResponse> ServiceReference1.MapServiceSoap.CreatGoogleTileAsync(ServiceReference1.CreatGoogleTileRequest request)
        {
            return base.Channel.CreatGoogleTileAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.CreatGoogleTileResponse> CreatGoogleTileAsync(int width, int height, int zoom, double lon, double lat)
        {
            ServiceReference1.CreatGoogleTileRequest inValue = new ServiceReference1.CreatGoogleTileRequest();
            inValue.width = width;
            inValue.height = height;
            inValue.zoom = zoom;
            inValue.lon = lon;
            inValue.lat = lat;
            return ((ServiceReference1.MapServiceSoap)(this)).CreatGoogleTileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.CreatCatelliteTileResponse> ServiceReference1.MapServiceSoap.CreatCatelliteTileAsync(ServiceReference1.CreatCatelliteTileRequest request)
        {
            return base.Channel.CreatCatelliteTileAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.CreatCatelliteTileResponse> CreatCatelliteTileAsync(int width, int height, int zoom, double lon, double lat)
        {
            ServiceReference1.CreatCatelliteTileRequest inValue = new ServiceReference1.CreatCatelliteTileRequest();
            inValue.width = width;
            inValue.height = height;
            inValue.zoom = zoom;
            inValue.lon = lon;
            inValue.lat = lat;
            return ((ServiceReference1.MapServiceSoap)(this)).CreatCatelliteTileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.CreatCwtTileResponse> ServiceReference1.MapServiceSoap.CreatCwtTileAsync(ServiceReference1.CreatCwtTileRequest request)
        {
            return base.Channel.CreatCwtTileAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.CreatCwtTileResponse> CreatCwtTileAsync(int width, int height, int zoom, double lon, double lat)
        {
            ServiceReference1.CreatCwtTileRequest inValue = new ServiceReference1.CreatCwtTileRequest();
            inValue.width = width;
            inValue.height = height;
            inValue.zoom = zoom;
            inValue.lon = lon;
            inValue.lat = lat;
            return ((ServiceReference1.MapServiceSoap)(this)).CreatCwtTileAsync(inValue);
        }
        
        public System.Threading.Tasks.Task CacheGeoCodeAddressAsync(string strlonlat, string cacheAddress)
        {
            return base.Channel.CacheGeoCodeAddressAsync(strlonlat, cacheAddress);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDistrictInfoAsync(string[] idlonlats)
        {
            return base.Channel.GetDistrictInfoAsync(idlonlats);
        }
        
        public System.Threading.Tasks.Task<string[]> GetCityDistrictInfoAsync(string[] idlonlats)
        {
            return base.Channel.GetCityDistrictInfoAsync(idlonlats);
        }
        
        public System.Threading.Tasks.Task<string[]> GetFullDistrictInfoAsync(string[] idlonlats)
        {
            return base.Channel.GetFullDistrictInfoAsync(idlonlats);
        }
        
        public System.Threading.Tasks.Task<string> GetDistrictInfoByXYAsync(double x, double y)
        {
            return base.Channel.GetDistrictInfoByXYAsync(x, y);
        }
        
        public System.Threading.Tasks.Task<string> GetWeatherIdAsync(double x, double y)
        {
            return base.Channel.GetWeatherIdAsync(x, y);
        }
        
        public System.Threading.Tasks.Task<string[]> GetRoadNamesAsync(string[] idlonlats)
        {
            return base.Channel.GetRoadNamesAsync(idlonlats);
        }
        
        public System.Threading.Tasks.Task<string> GetRoadNameAsync(double lon, double lat)
        {
            return base.Channel.GetRoadNameAsync(lon, lat);
        }
        
        public System.Threading.Tasks.Task<string> GetAlarmStateAsync(string strXml)
        {
            return base.Channel.GetAlarmStateAsync(strXml);
        }
        
        public System.Threading.Tasks.Task<string> GetRoadRankAsync(double lon, double lat)
        {
            return base.Channel.GetRoadRankAsync(lon, lat);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.GetAlarmStatusResponse> GetAlarmStatusAsync(ServiceReference1.GetAlarmStatusRequest request)
        {
            return base.Channel.GetAlarmStatusAsync(request);
        }
        
        public System.Threading.Tasks.Task<string[]> GetRegionNamesAsync(string regionID)
        {
            return base.Channel.GetRegionNamesAsync(regionID);
        }
        
        public System.Threading.Tasks.Task<bool> IsInRegionAsync(double lon, double lat, string regionID)
        {
            return base.Channel.IsInRegionAsync(lon, lat, regionID);
        }
        
        public System.Threading.Tasks.Task<string[]> IsInRegionsAsync(string[] paramStr)
        {
            return base.Channel.IsInRegionsAsync(paramStr);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.ExportTrackLineResponse> ServiceReference1.MapServiceSoap.ExportTrackLineAsync(ServiceReference1.ExportTrackLineRequest request)
        {
            return base.Channel.ExportTrackLineAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ExportTrackLineResponse> ExportTrackLineAsync(string[] lonlats, string shapeFileName)
        {
            ServiceReference1.ExportTrackLineRequest inValue = new ServiceReference1.ExportTrackLineRequest();
            inValue.lonlats = lonlats;
            inValue.shapeFileName = shapeFileName;
            return ((ServiceReference1.MapServiceSoap)(this)).ExportTrackLineAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> OutInAreaStatisticAsync(string[] trackData, string[] areaData)
        {
            return base.Channel.OutInAreaStatisticAsync(trackData, areaData);
        }
        
        public System.Threading.Tasks.Task<string> RouteAnalyAsync(double sX, double sY, double eX, double eY)
        {
            return base.Channel.RouteAnalyAsync(sX, sY, eX, eY);
        }
        
        public System.Threading.Tasks.Task<string> T_CacheInfoAsync()
        {
            return base.Channel.T_CacheInfoAsync();
        }
        
        public System.Threading.Tasks.Task<string> T_GetQueryCountAsync()
        {
            return base.Channel.T_GetQueryCountAsync();
        }
        
        public System.Threading.Tasks.Task<bool> T_ExportQueryIPAsync()
        {
            return base.Channel.T_ExportQueryIPAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.MapServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.MapServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.MapServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://192.168.3.87:8088/topgps7/map/openlayers/mapservice.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.MapServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://192.168.3.87:8088/topgps7/map/openlayers/mapservice.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            MapServiceSoap,
            
            MapServiceSoap12,
        }
    }
}
